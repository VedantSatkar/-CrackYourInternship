class Solution 
{
    //Function to find maximum of minimums of every window size.
    static int[] maxOfMin(int[] arr, int n) 
    {
        // Your code here
        int[] left = new int [n], right = new int[n], ans = new int[n + 1];
        Arrays.fill(right, n);
        
        Stack<Integer> s = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) s.pop();
            left[i] = s.isEmpty() ? -1 : s.peek();
            s.push(i);
        }
        
        s.clear();
        
        for (int i = n - 1; i >= 0; i--) {
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) s.pop();
            right[i] = s.isEmpty() ? n : s.peek();
            s.push(i);
        }
        
        for (int i = 0; i < n; i++) {
            int len = right[i] - left[i] - 1;
            ans[len] = Math.max(ans[len], arr[i]);
        }
        
        for (int i = n - 1; i > 0; i--) {
            ans[i] = Math.max(ans[i], ans[i + 1]);
        }
        
        return Arrays.copyOfRange(ans, 1, n + 1);
    }
}
