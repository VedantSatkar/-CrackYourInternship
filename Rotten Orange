class Solution
{
     public static class Pair{
        int row;
        int col;
        int time;
        public  Pair(int a,int b,int c){
            this.row=a;
            this.col=b;
            this.time=c;
        }

    }
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        // Code here
         Queue<Pair> q=new LinkedList<>();
        int[][] visited=new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j,0));
                }
            }
        }
        
        int answer=getTime(grid,q);
         for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==1){
                   return -1;
                }
            }
        }
        return answer;
    }
     private static int getTime(int[][] grid, Queue<Pair> q) {
        int answer=0;
        while(!q.isEmpty()){
            int row=q.peek().row;
            int col=q.peek().col;
            int ans=q.peek().time;
            answer=Math.max(answer,q.peek().time);
            q.poll();
//            if(row<0||row>= grid.length||col<0||col>=grid[0].length){
//                continue;
//            }
            if(row-1>=0 ){
                if(grid[row-1][col]==1){
                    grid[row-1][col]=2;
                    q.add(new Pair(row-1,col,ans+1));
                }
            }
            if(row+1< grid.length){
                if(grid[row+1][col]==1){
                    grid[row+1][col]=2;
                    q.add(new Pair(row+1,col,ans+1));
                }
            }
            if(col-1>=0){
                if(grid[row][col-1]==1){
                    grid[row][col-1]=2;
                    q.add(new Pair(row,col-1,ans+1));
                }
            }
            if(col+1<grid[0].length){
                if(grid[row][col+1]==1){
                    grid[row][col+1]=2;
                    q.add(new Pair(row,col+1,ans+1));
                }
            }
        }
        return answer;
    }
}
