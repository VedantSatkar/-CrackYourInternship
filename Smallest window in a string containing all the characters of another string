class Solution
{
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    public static String smallestWindow(String s, String p)
    {
        // Your code here
        if (s == null || p == null || s.length() < p.length()) {
            return "-1";
        }

        // Count frequencies of characters in P
        HashMap<Character, Integer> pCount = new HashMap<>();
        for (char ch : p.toCharArray()) {
            pCount.put(ch, pCount.getOrDefault(ch, 0) + 1);
        }

        // Variables to track the smallest window
        int minLength = Integer.MAX_VALUE;
        int start = 0;
        int matched = 0;
        int windowStart = 0;

        // Frequency map for characters in the current window
        HashMap<Character, Integer> sCount = new HashMap<>();

        for (int end = 0; end < s.length(); end++) {
            char endChar = s.charAt(end);
            sCount.put(endChar, sCount.getOrDefault(endChar, 0) + 1);

            // Check if the current character matches the frequency in p
            if (pCount.containsKey(endChar) && sCount.get(endChar).intValue() <= pCount.get(endChar).intValue()) {
                matched++;
            }

            // Shrink the window from the start if all characters are matched
            while (matched == p.length()) {
                if (end - start + 1 < minLength) {
                    minLength = end - start + 1;
                    windowStart = start;
                }

                char startChar = s.charAt(start);
                sCount.put(startChar, sCount.get(startChar) - 1);
                if (pCount.containsKey(startChar) && sCount.get(startChar).intValue() < pCount.get(startChar).intValue()) {
                    matched--;
                }
                start++;
            }
        }

        return minLength == Integer.MAX_VALUE ? "-1" : s.substring(windowStart, windowStart + minLength);
    }
}
