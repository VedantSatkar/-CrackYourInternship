class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int count = 0;
        int sum = 0;
                  
        Map<Integer, Integer> remainderCount = new HashMap<>();
        remainderCount.put(0, 1); // To handle subarrays that are directly divisible by k

        for (int num : nums) {
            sum += num;
            int remainder = (sum % k + k) % k; // Normalize the remainder to be positive

            // If remainder exists in the map, it means there are subarrays with sum divisible by k
            if (remainderCount.containsKey(remainder)) {
                count += remainderCount.get(remainder);
            }

            // Update the remainder count in the map
            remainderCount.put(remainder, remainderCount.getOrDefault(remainder, 0) + 1);
        }

        return count;
    }
}
