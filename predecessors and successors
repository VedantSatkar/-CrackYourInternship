class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // Initialize predecessors and successors
        pre[0] = null;
        suc[0] = null;
        
        // Start traversing the tree
        findPreSucHelper(root, key, pre, suc);
    }
    
    private static void findPreSucHelper(Node root, int key, Node[] pre, Node[] suc) {
        if (root == null) {
            return;
        }
        
        // Traverse the left subtree
        if (key < root.data) {
            // The current node might be the successor
            suc[0] = root;
            findPreSucHelper(root.left, key, pre, suc);
        } else if (key > root.data) {
            // The current node might be the predecessor
            pre[0] = root;
            findPreSucHelper(root.right, key, pre, suc);
        } else {
            // The key is equal to the current node's value
            // Find the predecessor in the left subtree
            if (root.left != null) {
                Node temp = root.left;
                while (temp.right != null) {
                    temp = temp.right;
                }
                pre[0] = temp;
            }
            
            // Find the successor in the right subtree
            if (root.right != null) {
                Node temp = root.right;
                while (temp.left != null) {
                    temp = temp.left;
                }
                suc[0] = temp;
            }
        }
    }
}
